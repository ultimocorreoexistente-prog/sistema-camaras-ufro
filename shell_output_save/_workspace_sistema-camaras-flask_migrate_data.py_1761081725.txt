import pandas as pd
from datetime import datetime
from app import app, db
from models import (Usuario, Ubicacion, Camara, Gabinete, Switch, Puerto_Switch, 
                   UPS, NVR_DVR, Fuente_Poder, Catalogo_Tipo_Falla, Falla, 
                   Mantenimiento, Equipo_Tecnico)
from werkzeug.security import generate_password_hash
import os

def safe_int(value):
    """Convierte valor a int manejando NaN"""
    try:
        if pd.isna(value):
            return None
        return int(value)
    except:
        return None

def safe_float(value):
    """Convierte valor a float manejando NaN"""
    try:
        if pd.isna(value):
            return None
        return float(value)
    except:
        return None

def safe_str(value):
    """Convierte valor a string manejando NaN"""
    if pd.isna(value):
        return None
    return str(value).strip() if str(value).strip() else None

def safe_date(value):
    """Convierte valor a date manejando NaN"""
    try:
        if pd.isna(value):
            return None
        if isinstance(value, str):
            return datetime.strptime(value, '%Y-%m-%d').date()
        return value.date() if hasattr(value, 'date') else None
    except:
        return None

def validar_falla_duplicada(equipo_tipo, equipo_id):
    """Valida si se puede insertar una nueva falla"""
    falla_activa = Falla.query.filter_by(
        equipo_tipo=equipo_tipo,
        equipo_id=equipo_id
    ).filter(
        Falla.estado.in_(['Pendiente', 'Asignada', 'En Proceso'])
    ).order_by(Falla.fecha_reporte.desc()).first()
    
    if falla_activa:
        return False, f'Falla duplicada rechazada (Equipo {equipo_tipo} ID {equipo_id})'
    return True, 'OK'

def migrar_datos():
    """Migra todas las planillas Excel a la base de datos"""
    
    print("=== INICIANDO MIGRACIÓN DE DATOS ===\n")
    
    base_path = 'planillas/'
    
    try:
        # 1. UBICACIONES
        print("1. Migrando Ubicaciones...")
        df = pd.read_excel(f'{base_path}Ubicaciones.xlsx')
        count = 0
        for _, row in df.iterrows():
            ubicacion = Ubicacion(
                campus=safe_str(row.get('Campus')),
                edificio=safe_str(row.get('Edificio')),
                piso=safe_str(row.get('Piso')),
                descripcion=safe_str(row.get('Descripcion')),
                latitud=safe_float(row.get('Latitud')),
                longitud=safe_float(row.get('Longitud')),
                activo=True
            )
            db.session.add(ubicacion)
            count += 1
        db.session.commit()
        print(f"   ✓ {count} ubicaciones insertadas\n")
        
        # 2. EQUIPOS TÉCNICOS
        print("2. Migrando Equipos Técnicos...")
        df = pd.read_excel(f'{base_path}Equipos_Tecnicos.xlsx')
        count = 0
        skipped = 0
        for _, row in df.iterrows():
            nombre = safe_str(row.get('Nombre'))
            apellido = safe_str(row.get('Apellido'))
            # Saltar filas sin nombre (requerido)
            if not nombre:
                skipped += 1
                continue
            equipo = Equipo_Tecnico(
                nombre=nombre,
                apellido=apellido,
                especialidad=safe_str(row.get('Especialidad')),
                telefono=safe_str(row.get('Telefono')),
                email=safe_str(row.get('Email')),
                estado=safe_str(row.get('Estado', 'Activo')),
                fecha_ingreso=safe_date(row.get('Fecha_Ingreso'))
            )
            db.session.add(equipo)
            count += 1
        db.session.commit()
        print(f"   ✓ {count} equipos técnicos insertados ({skipped} filas omitidas por datos incompletos)\n")
        
        # 3. CATÁLOGO TIPOS DE FALLAS
        print("3. Migrando Catálogo de Tipos de Fallas...")
        df = pd.read_excel(f'{base_path}Catalogo_Tipos_Fallas.xlsx')
        count = 0
        skipped = 0
        for _, row in df.iterrows():
            nombre = safe_str(row.get('Nombre'))
            # Saltar filas sin nombre (requerido)
            if not nombre:
                skipped += 1
                continue
            tipo_falla = Catalogo_Tipo_Falla(
                nombre=nombre,
                categoria=safe_str(row.get('Categoria')),
                descripcion=safe_str(row.get('Descripcion')),
                gravedad=safe_str(row.get('Gravedad', 'Media')),
                tiempo_estimado_resolucion=safe_int(row.get('Tiempo_Estimado_Resolucion'))
            )
            db.session.add(tipo_falla)
            count += 1
        db.session.commit()
        print(f"   ✓ {count} tipos de fallas insertados ({skipped} filas omitidas)\n")
        
        # 4. GABINETES
        print("4. Migrando Gabinetes...")
        df = pd.read_excel(f'{base_path}Gabinetes.xlsx')
        count = 0
        skipped = 0
        for _, row in df.iterrows():
            codigo = safe_str(row.get('Codigo'))
            # Saltar filas sin código (requerido)
            if not codigo:
                skipped += 1
                continue
            gabinete = Gabinete(
                codigo=codigo,
                nombre=safe_str(row.get('Nombre')),
                tipo_ubicacion_general=safe_str(row.get('Tipo_Ubicacion_General')),
                tipo_ubicacion_detallada=safe_str(row.get('Tipo_Ubicacion_Detallada')),
                ubicacion_id=safe_int(row.get('ID_Ubicacion')),
                capacidad=safe_int(row.get('Capacidad')),
                tiene_ups=bool(row.get('Tiene_UPS', False)),
                tiene_switch=bool(row.get('Tiene_Switch', False)),
                tiene_nvr=bool(row.get('Tiene_NVR', False)),
                conexion_fibra=bool(row.get('Conexion_Fibra', False)),
                estado=safe_str(row.get('Estado', 'Activo')),
                fecha_alta=safe_date(row.get('Fecha_Alta')),
                observaciones=safe_str(row.get('Observaciones')),
                latitud=safe_float(row.get('Latitud')),
                longitud=safe_float(row.get('Longitud'))
            )
            db.session.add(gabinete)
            count += 1
        db.session.commit()
        print(f"   ✓ {count} gabinetes insertados ({skipped} filas omitidas)\n")
        
        # 5. SWITCHES
        print("5. Migrando Switches...")
        df = pd.read_excel(f'{base_path}Switches.xlsx')
        count = 0
        skipped = 0
        for _, row in df.iterrows():
            codigo = safe_str(row.get('Codigo'))
            if not codigo:
                skipped += 1
                continue
            switch = Switch(
                codigo=codigo,
                nombre=safe_str(row.get('Nombre')),
                ip=safe_str(row.get('IP')),
                modelo=safe_str(row.get('Modelo')),
                marca=safe_str(row.get('Marca')),
                numero_serie=safe_str(row.get('Numero_Serie')),
                gabinete_id=safe_int(row.get('ID_Gabinete')),
                puertos_totales=safe_int(row.get('Puertos_Totales')),
                puertos_usados=safe_int(row.get('Puertos_Usados', 0)),
                puertos_disponibles=safe_int(row.get('Puertos_Disponibles')),
                capacidad_poe=bool(row.get('Capacidad_PoE', False)),
                estado=safe_str(row.get('Estado', 'Activo')),
                fecha_alta=safe_date(row.get('Fecha_Alta')),
                observaciones=safe_str(row.get('Observaciones')),
                latitud=safe_float(row.get('Latitud')),
                longitud=safe_float(row.get('Longitud'))
            )
            db.session.add(switch)
            count += 1
        db.session.commit()
        print(f"   ✓ {count} switches insertados ({skipped} filas omitidas)\n")
        
        # 6. PUERTOS SWITCH
