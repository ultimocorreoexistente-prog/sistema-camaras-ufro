#!/usr/bin/env python3
"""
Script de prueba para validar eliminaci√≥n de foreign keys en entorno seguro
Simula el proceso sin modificar la base de datos real
"""

import os
import psycopg2
from urllib.parse import urlparse

def conectar_bd():
    """Conectar a la base de datos Railway PostgreSQL"""
    db_url = os.getenv('DATABASE_URL')
    if not db_url:
        db_url = "postgresql://postgres:WMQxvzTQsdkiAUOqfMgXmzgAHqxDkwRJ@tramway.proxy.rlwy.net:34726/railway"
    
    parsed = urlparse(db_url)
    
    return psycopg2.connect(
        host=parsed.hostname,
        port=parsed.port,
        database=parsed.path[1:],
        user=parsed.username,
        password=parsed.password
    )

def simular_eliminacion_segura():
    """Simular el proceso de eliminaci√≥n sin hacer cambios"""
    print("üß™ SIMULACI√ìN SEGURA DE ELIMINACI√ìN DE FOREIGN KEYS")
    print("=" * 60)
    
    conn = conectar_bd()
    cur = conn.cursor()
    
    # 1. Verificar que las tablas plurales existen y tienen datos
    print("\n‚úÖ VERIFICANDO TABLAS PRINCIPALES:")
    tablas_principales = ['usuarios', 'camaras', 'ubicaciones']
    
    for tabla in tablas_principales:
        cur.execute(f"SELECT COUNT(*) FROM {tabla}")
        count = cur.fetchone()[0]
        print(f"   üìä {tabla}: {count} registros")
    
    # 2. Verificar que las tablas singulares existen
    print("\n‚ö†Ô∏è  VERIFICANDO TABLAS DUPLICADAS:")
    tablas_duplicadas = ['usuario', 'camara', 'ubicacion']
    
    for tabla in tablas_duplicadas:
        cur.execute(f"SELECT COUNT(*) FROM {tabla}")
        count = cur.fetchone()[0]
        print(f"   üìä {tabla}: {count} registros")
    
    # 3. Simular eliminaci√≥n de constraints
    print("\nüîß COMANDOS QUE SE EJECUTAR√çAN:")
    
    comandos_validacion = [
        "-- Validaci√≥n previa: Verificar que no hay registros hu√©rfanos",
        "SELECT COUNT(*) FROM falla WHERE reportado_por_id NOT IN (SELECT id FROM usuario);",
        "SELECT COUNT(*) FROM falla WHERE tecnico_asignado_id NOT IN (SELECT id FROM usuario);",
        "SELECT COUNT(*) FROM mantenimiento WHERE tecnico_id NOT IN (SELECT id FROM usuario);",
        "SELECT COUNT(*) FROM puerto_switch WHERE camara_id NOT IN (SELECT id FROM camara);",
        "SELECT COUNT(*) FROM camara WHERE ubicacion_id NOT IN (SELECT id FROM ubicacion);",
        "",
        "-- COMANDOS DE ELIMINACI√ìN REAL:",
        "ALTER TABLE falla DROP CONSTRAINT IF EXISTS falla_reportado_por_id_fkey;",
        "ALTER TABLE falla DROP CONSTRAINT IF EXISTS falla_tecnico_asignado_id_fkey;",
        "ALTER TABLE historial_estado_equipo DROP CONSTRAINT IF EXISTS historial_estado_equipo_usuario_id_fkey;",
        "ALTER TABLE mantenimiento DROP CONSTRAINT IF EXISTS mantenimiento_tecnico_id_fkey;",
        "ALTER TABLE puerto_switch DROP CONSTRAINT IF EXISTS fk_puerto_switch_camara;",
        "ALTER TABLE camara DROP CONSTRAINT IF EXISTS camara_ubicacion_id_fkey;",
        "ALTER TABLE fuente_poder DROP CONSTRAINT IF EXISTS fuente_poder_ubicacion_id_fkey;",
        "ALTER TABLE gabinete DROP CONSTRAINT IF EXISTS gabinete_ubicacion_id_fkey;",
        "ALTER TABLE nvr_dvr DROP CONSTRAINT IF EXISTS nvr_dvr_ubicacion_id_fkey;",
        "ALTER TABLE ups DROP CONSTRAINT IF EXISTS ups_ubicacion_id_fkey;",
        "",
        "-- Eliminaci√≥n de tablas:",
        "DROP TABLE usuario CASCADE;",
        "DROP TABLE camara CASCADE;",
        "DROP TABLE ubicacion CASCADE;",
        "",
        "-- Verificaci√≥n final:",
        "SELECT COUNT(*) FROM usuarios;",
        "SELECT COUNT(*) FROM camaras;",
        "SELECT COUNT(*) FROM ubicaciones;"
    ]
    
    for comando in comandos_validacion:
        print(f"   {comando}")
    
    # 4. Ejecutar validaciones reales (solo lecturas)
    print("\nüîç EJECUTANDO VALIDACIONES:")
    
    # Verificar si hay registros hu√©rfanos
    print("   Verificando integridad de datos...")
    
    # Verificar integridad de foreign keys a 'usuario'
    for tabla, columna, constraint in [
        ('falla', 'reportado_por_id', 'falla_reportado_por_id_fkey'),
        ('falla', 'tecnico_asignado_id', 'falla_tecnico_asignado_id_fkey'),
        ('mantenimiento', 'tecnico_id', 'mantenimiento_tecnico_id_fkey')
    ]:
        try:
            cur.execute(f"SELECT COUNT(*) FROM {tabla} WHERE {columna} NOT IN (SELECT id FROM usuario)")
            hu√©rfanos = cur.fetchone()[0]
            if hu√©rfanos > 0:
                print(f"   ‚ö†Ô∏è  {tabla}.{columna}: {hu√©rfanos} registros hu√©rfanos")
            else:
                print(f"   ‚úÖ {tabla}.{columna}: Sin registros hu√©rfanos")
        except Exception as e:
            print(f"   ‚ùå Error verificando {tabla}.{columna}: {e}")
    
    # Verificar integridad de foreign keys a 'camara'
    try:
        cur.execute("SELECT COUNT(*) FROM puerto_switch WHERE camara_id NOT IN (SELECT id FROM camara)")
        hu√©rfanos = cur.fetchone()[0]
        if hu√©rfanos > 0:
            print(f"   ‚ö†Ô∏è  puerto_switch.camara_id: {hu√©rfanos} registros hu√©rfanos")
        else:
            print(f"   ‚úÖ puerto_switch.camara_id: Sin registros hu√©rfanos")
    except Exception as e:
        print(f"   ‚ùå Error verificando puerto_switch.camara_id: {e}")
    
    # Verificar integridad de foreign keys a 'ubicacion'
    for tabla in ['camara', 'fuente_poder', 'gabinete', 'nvr_dvr', 'ups']:
        try:
            cur.execute(f"SELECT COUNT(*) FROM {tabla} WHERE ubicacion_id NOT IN (SELECT id FROM ubicacion)")
            hu√©rfanos = cur.fetchone()[0]
            if hu√©rfanos > 0:
                print(f"   ‚ö†Ô∏è  {tabla}.ubicacion_id: {hu√©rfanos} registros hu√©rfanos")
            else:
                print(f"   ‚úÖ {tabla}.ubicacion_id: Sin registros hu√©rfanos")
        except Exception as e:
            print(f"   ‚ùå Error verificando {tabla}.ubicacion_id: {e}")
    
    cur.close()
    conn.close()
    
    print("\nüéØ CONCLUSI√ìN:")
    print("   Si todos los checks son ‚úÖ, la eliminaci√≥n ser√≠a segura.")
    print("   Si hay ‚ö†Ô∏è , se requiere limpieza previa de datos hu√©rfanos.")
    print("   La aplicaci√≥n seguir√° funcionando ya que models.py apunta a tablas plurales.")

def main():
    """Funci√≥n principal"""
    print("Esta simulaci√≥n NO modifica la base de datos real")
    print("Ejecuta solo validaciones de lectura")
    print()
    
    simular_eliminacion_segura()

if __name__ == "__main__":
    main()