#!/usr/bin/env python3
"""
Verificar estado de la base de datos Railway y aplicaci√≥n
"""
import os
import psycopg2
import requests

def verificar_base_datos_railway():
    """Verificar usuarios en Railway PostgreSQL"""
    try:
        DATABASE_URL = 'postgresql://postgres:WMQxvzTQsdkiAUOqfMgXmzgAHqxDkwRJ@tramway.proxy.rlwy.net:34726/railway'
        
        print("üîç VERIFICANDO BASE DE DATOS RAILWAY POSTGRESQL")
        print("="*60)
        
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # Verificar usuarios
        cursor.execute("SELECT username, rol, nombre_completo, email, LEFT(password_hash, 50) as hash_preview FROM usuario ORDER BY rol, username")
        usuarios = cursor.fetchall()
        
        print(f"üìä Total usuarios en PostgreSQL: {len(usuarios)}")
        for username, rol, nombre, email, hash_preview in usuarios:
            print(f"üë§ {username} ({rol}) - {nombre} - {email}")
            print(f"   Hash: {hash_preview}...")
        
        # Verificar Charles espec√≠ficamente
        cursor.execute("SELECT username, rol, email, password_hash FROM usuario WHERE username = %s", ('charles.jelvez',))
        charles = cursor.fetchone()
        
        if charles:
            print(f"\n‚úÖ CHARLES ENCONTRADO EN POSTGRESQL:")
            print(f"   Username: {charles[0]}")
            print(f"   Rol: {charles[1]}")
            print(f"   Email: {charles[2]}")
            print(f"   Hash: {charles[3][:50]}...")
        else:
            print("\n‚ùå CHARLES NO ENCONTRADO EN POSTGRESQL")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR PostgreSQL: {e}")
        return False

def verificar_aplicacion_railway():
    """Verificar estado de la aplicaci√≥n web en Railway"""
    try:
        print("\nüåê VERIFICANDO APLICACI√ìN WEB RAILWAY")
        print("="*60)
        
        url = "https://gestion-camaras-ufro.up.railway.app/"
        
        # Verificar p√°gina principal
        response = requests.get(url, timeout=10)
        print(f"üì° Status Code: {response.status_code}")
        print(f"üìç URL: {response.url}")
        
        if "login" in response.text.lower():
            print("‚úÖ P√°gina de login cargada correctamente")
        else:
            print("‚ö†Ô∏è No se detect√≥ p√°gina de login")
        
        # Verificar si hay mensajes de error
        if "error" in response.text.lower():
            print("‚ö†Ô∏è Detectado mensaje de error en la p√°gina")
        
        # Verificar funcionalidades espec√≠ficas
        if "charles" in response.text.lower():
            print("‚úÖ Referencias a Charles detectadas")
        else:
            print("‚ö†Ô∏è No se encontraron referencias a Charles")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR Web: {e}")
        return False

def verificar_configuracion():
    """Verificar configuraci√≥n de variables de entorno"""
    print("\n‚öôÔ∏è VERIFICANDO CONFIGURACI√ìN DE ENTORNO")
    print("="*60)
    
    # Verificar si la aplicaci√≥n usa SQLite por defecto
    try:
        print("üîç Verificando c√≥digo de aplicaci√≥n...")
        
        # Leer archivo app.py para verificar configuraci√≥n de BD
        with open('app.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar configuraci√≥n de DATABASE_URL
        if 'sqlite' in content.lower():
            print("‚ö†Ô∏è Detectado SQLite en el c√≥digo de aplicaci√≥n")
            print("   La aplicaci√≥n puede estar usando SQLite en lugar de PostgreSQL")
        
        if 'DATABASE_URL' in content:
            print("‚úÖ Variable DATABASE_URL referenciada en el c√≥digo")
        
        # Verificar l√≠neas espec√≠ficas
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if 'DATABASE_URL' in line and 'sqlite' in line.lower():
                print(f"   L√≠nea {i+1}: {line.strip()}")
        
    except Exception as e:
        print(f"‚ùå Error leyendo c√≥digo: {e}")

def main():
    print("üîß DIAGN√ìSTICO COMPLETO DEL SISTEMA")
    print("="*80)
    print(f"‚è∞ Fecha: 2025-10-24 22:32:45")
    print("="*80)
    
    # 1. Verificar base de datos PostgreSQL
    db_ok = verificar_base_datos_railway()
    
    # 2. Verificar aplicaci√≥n web
    web_ok = verificar_aplicacion_railway()
    
    # 3. Verificar configuraci√≥n
    verificar_configuracion()
    
    # Resumen final
    print("\n" + "="*80)
    print("üìã RESUMEN DEL DIAGN√ìSTICO")
    print("="*80)
    print(f"üìä Base de datos PostgreSQL: {'‚úÖ OK' if db_ok else '‚ùå ERROR'}")
    print(f"üåê Aplicaci√≥n web Railway: {'‚úÖ OK' if web_ok else '‚ùå ERROR'}")
    
    if db_ok and web_ok:
        print("\nüéØ DIAGN√ìSTICO:")
        print("   ‚úÖ Base de datos PostgreSQL funcionando")
        print("   ‚úÖ Aplicaci√≥n web accessible")
        print("   ‚ùå PROBLEMA: Desconexi√≥n entre BD y aplicaci√≥n")
        print("\nüí° POSIBLES CAUSAS:")
        print("   1. Variables de entorno no configuradas en Railway")
        print("   2. Aplicaci√≥n usando SQLite por defecto")
        print("   3. Sincronizaci√≥n incompleta del deployment")
        print("\nüîß SOLUCIONES:")
        print("   1. Verificar DATABASE_URL en Railway dashboard")
        print("   2. Reiniciar aplicaci√≥n en Railway")
        print("   3. Verificar logs de Railway")

if __name__ == "__main__":
    main()