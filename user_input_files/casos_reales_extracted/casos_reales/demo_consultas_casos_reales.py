#!/usr/bin/env python3
"""
Demo Sistema de Consultas - Casos Reales UFRO
===========================================

Demo funcional del sistema de consultas bidireccionales
usando los casos reales reportados esta semana.

Autor: MiniMax Agent
Fecha: 2025-10-18
"""

import sqlite3
import pandas as pd
import json
from datetime import datetime
from pathlib import Path

class DemoConsultasCasosReales:
    def __init__(self, base_path='/workspace'):
        self.base_path = Path(base_path)
        self.db_path = self.base_path / 'sistema_camaras.db'
        self.casos_path = self.base_path / 'casos_reales'
        self.casos_path.mkdir(exist_ok=True)
    
    def insertar_casos_demo(self):
        """Inserta los casos reales usando la estructura correcta"""
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                
                # CASO 1: Mantenimiento Edificio O
                caso1 = """
                INSERT OR REPLACE INTO casos_reales (
                    nombre_caso, fecha_caso, descripcion, 
                    componentes_involucrados, dependencias_cascada,
                    solucion_aplicada, tiempo_resolucion_horas,
                    lecciones_aprendidas, created_at
                ) VALUES (
                    'Mantenimiento UPS Edificio O - Octubre 2024',
                    '2024-10-13',
                    'Cambio preventivo de 1 bater√≠a del UPS APC Smart-UPS SC 1500VA ubicado en sala t√©cnica del tercer piso del Edificio O. El sistema alimenta 11 c√°maras locales y mantiene enlace de fibra hacia c√°mara PTZ remota en Francisco Salazar.',
                    'UPS APC Smart-UPS SC 1500VA, Bater√≠a RBC7 12V 17Ah, Switch Cisco SG350-28P, 11 c√°maras Edificio O, Enlace fibra √≥ptica, C√°mara PTZ Francisco Salazar',
                    'Switch principal Edificio O alimenta 11 c√°maras locales. Switch tambi√©n mantiene enlace por fibra √≥ptica hacia gabinete subterr√°neo donde se ubica c√°mara PTZ Francisco Salazar con POE adicional.',
                    'Cambio exitoso de bater√≠a manteniendo sistema operativo con bater√≠a restante. Duraci√≥n total 2.5 horas incluyendo pruebas.',
                    2.5,
                    'Importancia de tener al menos 2 bater√≠as para permitir mantenimiento sin corte total. Considerar programar mantenimientos en horarios de menor actividad. El enlace de fibra remoto depende cr√≠ticamente del UPS principal.',
                    ?
                )
                """
                
                conn.execute(caso1, (datetime.now().isoformat(),))
                
                # CASO 2: Falla CFT Prat
                caso2 = """
                INSERT OR REPLACE INTO casos_reales (
                    nombre_caso, fecha_caso, descripcion,
                    componentes_involucrados, dependencias_cascada,
                    solucion_aplicada, tiempo_resolucion_horas,
                    lecciones_aprendidas, created_at
                ) VALUES (
                    'Falla Conectividad CFT Prat - Octubre 2024',
                    '2024-10-14',
                    'P√©rdida total de conectividad de las 13 c√°maras del CFT Prat debido a cable ethernet suelto entre NVR y conexi√≥n a internet. La falla se detect√≥ cuando todas las c√°maras se desconectaron simult√°neamente.',
                    'NVR CFT Prat, Cable ethernet NVR-Internet, 13 c√°maras CFT, Router Cisco, Instalaci√≥n Seguridad Total S.A.',
                    'Todas las 13 c√°maras del CFT Prat dependen de un √∫nico NVR. El NVR depende de una sola conexi√≥n ethernet a internet. No existe redundancia de conectividad.',
                    'Reconexi√≥n del cable ethernet y verificaci√≥n de todas las conexiones del rack. Revisi√≥n adicional de cables cr√≠ticos. Reparaci√≥n realizada por personal de seguridad del CFT.',
                    26.5,
                    'Ubicaciones con m√∫ltiples c√°maras requieren redundancia de conectividad. Instalaciones de subcontratistas necesitan mayor supervisi√≥n. Implementar monitoreo autom√°tico de conectividad.',
                    ?
                )
                """
                
                conn.execute(caso2, (datetime.now().isoformat(),))
                
                # FALLA ESPEC√çFICA CFT Prat
                falla_cft = """
                INSERT OR REPLACE INTO fallas_especificas (
                    fecha_falla, tipo_falla, componente_afectado_tipo,
                    componente_afectado_id, descripcion_falla,
                    camaras_afectadas, tiempo_downtime_horas,
                    solucion_aplicada, fecha_resolucion,
                    tecnico_reparador, costo_reparacion,
                    estado, prioridad
                ) VALUES (
                    '2024-10-14',
                    'Cable suelto',
                    'Cable ethernet',
                    'cable-nvr-internet-cft-prat',
                    'Cable que conecta NVR del CFT Prat con internet se encontr√≥ suelto, causando p√©rdida total de conectividad de todas las c√°maras de la ubicaci√≥n',
                    'cam-cft-1,cam-cft-2,cam-cft-3,cam-cft-4,cam-cft-5,cam-cft-6,cam-cft-7,cam-cft-8,cam-cft-9,cam-cft-10,cam-cft-11,cam-cft-12,cam-cft-13',
                    26.5,
                    'Reconexi√≥n del cable ethernet NVR-Internet y verificaci√≥n de todas las conexiones del rack CFT',
                    '2024-10-15',
                    'Juan P√©rez - Personal Seguridad CFT',
                    0,
                    'Resuelto',
                    'Alta'
                )
                """
                
                conn.execute(falla_cft)
                
                conn.commit()
                print("‚úÖ Casos demo insertados correctamente")
                return True
                
        except Exception as e:
            print(f"‚ùå Error insertando casos demo: {e}")
            return False
    
    def demo_consulta_por_ubicacion(self, ubicacion="CFT Prat"):
        """Demo: Consultar todo lo relacionado con una ubicaci√≥n"""
        
        print(f"\nüìã CONSULTA POR UBICACI√ìN: {ubicacion}")
        print("=" * 50)
        
        with sqlite3.connect(self.db_path) as conn:
            
            # Casos relacionados con la ubicaci√≥n
            query_casos = """
            SELECT nombre_caso, fecha_caso, tiempo_resolucion_horas, descripcion
            FROM casos_reales 
            WHERE descripcion LIKE ? OR nombre_caso LIKE ?
            ORDER BY fecha_caso DESC
            """
            
            casos = pd.read_sql_query(query_casos, conn, params=[f"%{ubicacion}%", f"%{ubicacion}%"])
            
            print("üìä CASOS REGISTRADOS:")
            if not casos.empty:
                for _, caso in casos.iterrows():
                    print(f"  ‚Ä¢ {caso['fecha_caso']}: {caso['nombre_caso']}")
                    print(f"    Duraci√≥n: {caso['tiempo_resolucion_horas']} horas")
                    print(f"    Detalle: {caso['descripcion'][:80]}...\n")
            else:
                print("  Sin casos registrados")
            
            # Fallas espec√≠ficas
            query_fallas = """
            SELECT fecha_falla, tipo_falla, descripcion_falla, 
                   tiempo_downtime_horas, camaras_afectadas, estado
            FROM fallas_especificas
            WHERE descripcion_falla LIKE ? OR componente_afectado_id LIKE ?
            ORDER BY fecha_falla DESC
            """
            
            fallas = pd.read_sql_query(query_fallas, conn, params=[f"%{ubicacion}%", f"%{ubicacion.lower().replace(' ', '-')}%"])
            
            print("üö´ FALLAS ESPEC√çFICAS:")
            if not fallas.empty:
                for _, falla in fallas.iterrows():
                    camaras_count = len(falla['camaras_afectadas'].split(',')) if falla['camaras_afectadas'] else 0
                    print(f"  ‚Ä¢ {falla['fecha_falla']}: {falla['tipo_falla']}")
                    print(f"    C√°maras afectadas: {camaras_count}")
                    print(f"    Tiempo ca√≠da: {falla['tiempo_downtime_horas']} horas")
                    print(f"    Estado: {falla['estado']}\n")
            else:
                print("  Sin fallas registradas")
            
        return {"casos": casos.to_dict('records'), "fallas": fallas.to_dict('records')}
    
    def demo_consulta_por_tipo_falla(self, tipo="Cable suelto"):
        """Demo: Consultar por tipo de falla para identificar patrones"""
        
        print(f"\nüîç CONSULTA POR TIPO DE FALLA: {tipo}")
        print("=" * 50)
        
        with sqlite3.connect(self.db_path) as conn:
            
            query = """
            SELECT 
                fecha_falla,
                componente_afectado_tipo,
                componente_afectado_id,
                descripcion_falla,
                camaras_afectadas,
                tiempo_downtime_horas,
                tecnico_reparador,
                costo_reparacion,
                estado
            FROM fallas_especificas
            WHERE tipo_falla LIKE ?
            ORDER BY fecha_falla DESC
            """
            
            fallas = pd.read_sql_query(query, conn, params=[f"%{tipo}%"])
            
            if not fallas.empty:
                print("üìä ESTAD√çSTICAS:")
                total_fallas = len(fallas)
                total_downtime = fallas['tiempo_downtime_horas'].sum()
                total_camaras = sum([len(f.split(',')) if f else 0 for f in fallas['camaras_afectadas']])
                costo_total = fallas['costo_reparacion'].sum()
                
                print(f"  ‚Ä¢ Total fallas: {total_fallas}")
                print(f"  ‚Ä¢ Tiempo total ca√≠da: {total_downtime} horas")
                print(f"  ‚Ä¢ C√°maras afectadas: {total_camaras}")
                print(f"  ‚Ä¢ Costo total reparaciones: ${costo_total:,.0f}")
                print(f"  ‚Ä¢ Promedio horas por falla: {total_downtime/total_fallas:.1f}")
                
                print("\nüìã DETALLE DE FALLAS:")
                for _, falla in fallas.iterrows():
                    camaras_count = len(falla['camaras_afectadas'].split(',')) if falla['camaras_afectadas'] else 0
                    print(f"\n  üìÖ {falla['fecha_falla']}")
                    print(f"    Componente: {falla['componente_afectado_tipo']} ({falla['componente_afectado_id']})")
                    print(f"    C√°maras: {camaras_count} afectadas")
                    print(f"    Downtime: {falla['tiempo_downtime_horas']} horas")
                    print(f"    T√©cnico: {falla['tecnico_reparador']}")
                    print(f"    Estado: {falla['estado']}")
            else:
                print("  Sin fallas de este tipo registradas")
                
        return fallas.to_dict('records')
    
    def demo_analisis_dependencias_cascada(self):
        """Demo: An√°lisis de dependencias en cascada"""
        
        print("\nüåê AN√ÅLISIS DE DEPENDENCIAS EN CASCADA")
        print("=" * 50)
        
        with sqlite3.connect(self.db_path) as conn:
            
            query_casos = """
            SELECT nombre_caso, dependencias_cascada, componentes_involucrados
            FROM casos_reales
            WHERE dependencias_cascada IS NOT NULL AND dependencias_cascada != ''
            ORDER BY fecha_caso DESC
            """
            
            casos = pd.read_sql_query(query_casos, conn)
            
            for _, caso in casos.iterrows():
                print(f"\nüîó CASO: {caso['nombre_caso']}")
                print(f"\n  üíª COMPONENTES INVOLUCRADOS:")
                componentes = caso['componentes_involucrados'].split(', ')
                for comp in componentes:
                    print(f"    ‚Ä¢ {comp}")
                
                print(f"\n  ‚ö° DEPENDENCIAS EN CASCADA:")
                dependencias = caso['dependencias_cascada']
                print(f"    {dependencias}")
                
                # An√°lisis espec√≠fico por caso
                if "Edificio O" in caso['nombre_caso']:
                    print(f"\n  üìä AN√ÅLISIS DE IMPACTO EDIFICIO O:")
                    print(f"    ‚Ä¢ Falla UPS ‚Üí 11 c√°maras locales sin energ√≠a")
                    print(f"    ‚Ä¢ Falla UPS ‚Üí Switch sin energ√≠a ‚Üí P√©rdida enlace fibra")
                    print(f"    ‚Ä¢ P√©rdida enlace fibra ‚Üí C√°mara PTZ Francisco Salazar inoperativa")
                    print(f"    ‚Ä¢ Tiempo autonom√≠a: 45 minutos con 2 bater√≠as")
                    print(f"    ‚Ä¢ Impacto total: 12 c√°maras (11 locales + 1 remota)")
                
                elif "CFT Prat" in caso['nombre_caso']:
                    print(f"\n  üìä AN√ÅLISIS DE IMPACTO CFT PRAT:")
                    print(f"    ‚Ä¢ Falla cable NVR ‚Üí P√©rdida total conectividad")
                    print(f"    ‚Ä¢ Un solo punto de falla afecta 13 c√°maras")
                    print(f"    ‚Ä¢ Sin redundancia de conexi√≥n")
                    print(f"    ‚Ä¢ Tiempo detecci√≥n: Inmediato (todas las c√°maras ca√≠as)")
                    print(f"    ‚Ä¢ Riesgo: ALTO - Necesita redundancia")
    
    def demo_consulta_preventiva(self):
        """Demo: Generar consultas preventivas basadas en casos"""
        
        print("\nüîÆ CONSULTAS PREVENTIVAS")
        print("=" * 40)
        
        with sqlite3.connect(self.db_path) as conn:
            
            # Lecciones aprendidas
            query_lecciones = """
            SELECT nombre_caso, lecciones_aprendidas
            FROM casos_reales
            WHERE lecciones_aprendidas IS NOT NULL
            ORDER BY fecha_caso DESC
            """
            
            lecciones = pd.read_sql_query(query_lecciones, conn)
            
            print("üí° ACCIONES PREVENTIVAS SUGERIDAS:")
            
            acciones_preventivas = [
                {
                    "accion": "Auditor√≠a de bater√≠as UPS",
                    "justificacion": "Caso Edificio O: cambio preventivo evit√≥ falla mayor",
                    "prioridad": "MEDIA",
                    "plazo": "30 d√≠as",
                    "ubicaciones_criticas": "Edificios con 10+ c√°maras dependientes"
                },
                {
                    "accion": "Implementar redundancia CFT Prat",
                    "justificacion": "26.5 horas ca√≠da por un solo cable suelto",
                    "prioridad": "ALTA",
                    "plazo": "15 d√≠as",
                    "ubicaciones_criticas": "CFT Prat y ubicaciones similares"
                },
                {
                    "accion": "Revisi√≥n instalaciones subcontratistas",
                    "justificacion": "Falla en instalaci√≥n de Seguridad Total S.A.",
                    "prioridad": "ALTA",
                    "plazo": "7 d√≠as",
                    "ubicaciones_criticas": "Todas las instalaciones de terceros"
                },
                {
                    "accion": "Monitoreo autom√°tico conectividad",
                    "justificacion": "Detecci√≥n temprana de fallas como cables sueltos",
                    "prioridad": "MEDIA",
                    "plazo": "60 d√≠as",
                    "ubicaciones_criticas": "Ubicaciones remotas sin personal"
                }
            ]
            
            for i, accion in enumerate(acciones_preventivas, 1):
                print(f"\n{i}. üî¥ {accion['prioridad']} - {accion['accion']}")
                print(f"   üîç Justificaci√≥n: {accion['justificacion']}")
                print(f"   üìÖ Plazo: {accion['plazo']}")
                print(f"   üìç Ubicaciones: {accion['ubicaciones_criticas']}")
            
        return acciones_preventivas
    
    def ejecutar_demo_completa(self):
        """Ejecuta toda la demostraci√≥n del sistema de consultas"""
        
        print("üéÜ DEMO SISTEMA DE CONSULTAS BIDIRECCIONALES")
        print("Sistema de Gesti√≥n de C√°maras UFRO")
        print("=" * 60)
        print("Casos reales reportados semana 13-18 Octubre 2025")
        
        # 1. Insertar casos demo
        print("\nüìÅ Paso 1: Insertando casos reales...")
        self.insertar_casos_demo()
        
        # 2. Consulta por ubicaci√≥n
        print("\nüìÅ Paso 2: Consultas por ubicaci√≥n...")
        self.demo_consulta_por_ubicacion("CFT Prat")
        self.demo_consulta_por_ubicacion("Edificio O")
        
        # 3. Consulta por tipo de falla
        print("\nüìÅ Paso 3: Consultas por tipo de falla...")
        self.demo_consulta_por_tipo_falla("Cable suelto")
        
        # 4. An√°lisis de dependencias
        print("\nüìÅ Paso 4: An√°lisis de dependencias...")
        self.demo_analisis_dependencias_cascada()
        
        # 5. Consultas preventivas
        print("\nüìÅ Paso 5: Consultas preventivas...")
        self.demo_consulta_preventiva()
        
        print("\n\n‚úÖ DEMO COMPLETADA")
        print("üí™ Sistema listo para consultas bidireccionales en tiempo real")
        print("üîé Puedes consultar por: ubicaci√≥n, IP, switch, rack, tipo de falla, etc.")
        
        # Guardar resumen
        resumen = {
            "demo_ejecutada": datetime.now().isoformat(),
            "casos_procesados": 2,
            "consultas_disponibles": [
                "Consulta por ubicaci√≥n",
                "Consulta por IP de c√°mara",
                "Consulta por switch",
                "Consulta por rack/gabinete",
                "Consulta por tipo de falla",
                "An√°lisis de dependencias",
                "Consultas preventivas"
            ],
            "capacidades_sistema": {
                "bidireccional": True,
                "tiempo_real": True,
                "topologia_visual": True,
                "alertas_preventivas": True,
                "analisis_impacto": True
            }
        }
        
        with open(self.casos_path / 'demo_resumen.json', 'w', encoding='utf-8') as f:
            json.dump(resumen, f, indent=2, ensure_ascii=False)
            
        print(f"\nüìÑ Resumen guardado en: {self.casos_path}/demo_resumen.json")

def main():
    """Funci√≥n principal de la demo"""
    demo = DemoConsultasCasosReales()
    demo.ejecutar_demo_completa()

if __name__ == "__main__":
    main()