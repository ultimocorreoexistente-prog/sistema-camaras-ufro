#!/usr/bin/env python3
"""
Script para agregar Caso 5: Falla Fibra √ìptica Bicicletero Principal

Fecha del incidente: 16/10/2025
Autor: MiniMax Agent
Fecha script: 2025-10-20
"""

import sqlite3
import json
from datetime import datetime, timedelta

def agregar_caso_5():
    """Agrega el Caso 5 a la base de datos"""
    
    db_path = 'sistema_camaras.db'
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("\n" + "="*70)
        print(" "*15 + "AGREGANDO CASO 5 - BICICLETERO")
        print("="*70)
        
        # Calcular tiempo de resoluci√≥n
        # Asumiendo que se report√≥ temprano en la ma√±ana (ej: 08:00)
        # y se resolvi√≥ a las 16:57
        hora_reporte = "08:00"  # Estimado
        hora_resolucion = "16:57"
        # Aproximadamente 8h 57min = 8.95 horas
        tiempo_resolucion = 8.95
        
        print("\nüìã INFORMACI√ìN DEL CASO:")
        print("-" * 70)
        print("  Fecha: 16/10/2025 (Jueves)")
        print("  Ubicaci√≥n: Bicicletero Principal")
        print("  Problema: Todas las c√°maras ca√≠das por falla de fibra √≥ptica")
        print("  Hora resoluci√≥n: 16:57")
        print(f"  Tiempo estimado: {tiempo_resolucion}h")
        
        # PASO 1: Insertar caso real
        print("\nüîß Insertando caso real...")
        cursor.execute('''
            INSERT OR REPLACE INTO casos_reales (
                nombre_caso, fecha_caso, descripcion,
                componentes_involucrados, dependencias_cascada,
                solucion_aplicada, tiempo_resolucion_horas,
                lecciones_aprendidas
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            'Falla Fibra √ìptica Bicicletero Principal',
            '2025-10-16',
            'Todas las c√°maras del Bicicletero Principal perdieron conexi√≥n por falla en cable de fibra √≥ptica proveniente del Edificio L (Odontolog√≠a)',
            json.dumps([
                'Gabinete Bicicletero Principal',
                'Switch Bicicletero',
                'Fuente de poder Bicicletero',
                'Cable fibra √≥ptica Edificio L ‚Üí Bicicletero',
                'Todas las c√°maras Bicicletero Principal'
            ]),
            json.dumps([
                'Dinfo (Sistema Central) ‚Üí Fibra ‚Üí Edificio Matem√°ticas',
                'Edificio Matem√°ticas ‚Üí Fibra ‚Üí Edificio L (Odontolog√≠a)',
                'Edificio L (Odontolog√≠a) ‚Üí Fibra ‚Üí Bicicletero Principal',
                'Bicicletero Principal: Switch + Fuente ‚Üí C√°maras'
            ]),
            'Apertura de gabinete, identificaci√≥n de cable fibra suelto, reconexi√≥n del cable de fibra √≥ptica',
            tiempo_resolucion,
            'Puntos cr√≠ticos de falla en enlaces de fibra √≥ptica de larga distancia. Necesidad de monitoreo de conectividad de enlaces cr√≠ticos. Documentar topolog√≠a completa de red de fibra. El Bicicletero depende de una cadena de 3 enlaces de fibra (Dinfo‚ÜíMatem√°ticas‚ÜíOdontolog√≠a‚ÜíBicicletero).'
        ))
        print("  ‚úì Caso real insertado")
        
        # PASO 2: Insertar falla espec√≠fica
        print("\nüö® Insertando falla espec√≠fica...")
        cursor.execute('''
            INSERT OR REPLACE INTO fallas_especificas (
                fecha_falla, tipo_falla, componente_afectado_tipo,
                componente_afectado_id, descripcion_falla,
                camaras_afectadas, tiempo_downtime_horas,
                solucion_aplicada, fecha_resolucion,
                tecnico_reparador, costo_reparacion,
                estado, prioridad, campus, observaciones
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            '2025-10-16',
            'Falla de conectividad',
            'Cable fibra √≥ptica',
            'fibra-edificio-l-bicicletero',
            'Cable de fibra √≥ptica desconectado entre Edificio L (Odontolog√≠a) y Bicicletero Principal. No llegaba se√±al al switch del gabinete.',
            json.dumps(['Todas las c√°maras Bicicletero Principal']),
            tiempo_resolucion,
            'Reconexi√≥n de cable de fibra √≥ptica en gabinete Bicicletero. Se√±al recuperada a las 16:57.',
            '2025-10-16',
            'Personal t√©cnico',
            0,
            'Resuelto',
            'Alta',
            'Andr√©s Bello',
            'El Bicicletero Principal depende de enlace de fibra desde Edificio L. Topolog√≠a: Dinfo ‚Üí Matem√°ticas ‚Üí Odontolog√≠a ‚Üí Bicicletero. Gabinete contiene 1 switch + 1 fuente de poder.'
        ))
        print("  ‚úì Falla espec√≠fica insertada")
        
        # PASO 3: Actualizar/Agregar infraestructura de red
        print("\nüåê Actualizando infraestructura de red...")
        
        # Agregar componentes de la topolog√≠a identificada
        infraestructura_nueva = [
            # Dinfo (Sistema Central)
            ('CORE-DINFO', 'Core_System', 'Andr√©s Bello', 'Direcci√≥n de Inform√°tica (Dinfo) - Sistema Central', '', 'Operativo', '', 0),
            
            # Edificio Matem√°ticas
            ('SW-MATEMATICAS', 'Switch', 'Andr√©s Bello', 'Edificio Matem√°ticas', '', 'Operativo', 'CORE-DINFO', 1),
            
            # Edificio L (Odontolog√≠a)
            ('SW-ODONTOLOGIA', 'Switch', 'Andr√©s Bello', 'Edificio L (Odontolog√≠a)', '', 'Operativo', 'SW-MATEMATICAS', 2),
            
            # Bicicletero Principal
            ('GAB-BICICLETERO', 'Gabinete', 'Andr√©s Bello', 'Bicicletero Principal', '', 'Operativo', 'SW-ODONTOLOGIA', 3),
            ('SW-BICICLETERO', 'Switch', 'Andr√©s Bello', 'Bicicletero Principal - Gabinete', '', 'Operativo', 'GAB-BICICLETERO', 4),
            ('FP-BICICLETERO', 'Fuente_Poder', 'Andr√©s Bello', 'Bicicletero Principal - Gabinete', '', 'Operativo', 'GAB-BICICLETERO', 4),
            
            # Enlaces de fibra
            ('FIBRA-DINFO-MAT', 'Enlace_Fibra', 'Andr√©s Bello', 'Dinfo ‚Üí Matem√°ticas', '', 'Operativo', 'CORE-DINFO', 1),
            ('FIBRA-MAT-ODON', 'Enlace_Fibra', 'Andr√©s Bello', 'Matem√°ticas ‚Üí Odontolog√≠a', '', 'Operativo', 'SW-MATEMATICAS', 2),
            ('FIBRA-ODON-BICI', 'Enlace_Fibra', 'Andr√©s Bello', 'Odontolog√≠a ‚Üí Bicicletero', '', 'Reparado', 'SW-ODONTOLOGIA', 3),
        ]
        
        for componente in infraestructura_nueva:
            cursor.execute('''
                INSERT OR REPLACE INTO infraestructura_red 
                (componente_id, tipo_componente, campus, ubicacion, ip_address, estado, dependencias, nivel_jerarquico)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', componente)
        
        print(f"  ‚úì {len(infraestructura_nueva)} componentes de infraestructura agregados/actualizados")
        
        # PASO 4: Agregar relaciones entre componentes
        print("\nüîó Agregando relaciones de componentes...")
        
        relaciones = [
            ('CORE-DINFO', 'FIBRA-DINFO-MAT', 'Alimenta'),
            ('FIBRA-DINFO-MAT', 'SW-MATEMATICAS', 'Conecta'),
            ('SW-MATEMATICAS', 'FIBRA-MAT-ODON', 'Alimenta'),
            ('FIBRA-MAT-ODON', 'SW-ODONTOLOGIA', 'Conecta'),
            ('SW-ODONTOLOGIA', 'FIBRA-ODON-BICI', 'Alimenta'),
            ('FIBRA-ODON-BICI', 'GAB-BICICLETERO', 'Conecta'),
            ('GAB-BICICLETERO', 'SW-BICICLETERO', 'Contiene'),
            ('GAB-BICICLETERO', 'FP-BICICLETERO', 'Contiene'),
        ]
        
        for padre, hijo, tipo in relaciones:
            cursor.execute('''
                INSERT OR REPLACE INTO relaciones_componentes 
                (componente_padre, componente_hijo, tipo_relacion)
                VALUES (?, ?, ?)
            ''', (padre, hijo, tipo))
        
        print(f"  ‚úì {len(relaciones)} relaciones agregadas")
        
        conn.commit()
        print("\n" + "="*70)
        print("‚úÖ CASO 5 AGREGADO EXITOSAMENTE")
        print("="*70)
        
        # Mostrar resumen actualizado
        print("\nüìä RESUMEN ACTUALIZADO:")
        print("-" * 70)
        
        cursor.execute("SELECT COUNT(*) FROM casos_reales")
        print(f"  Casos reales totales: {cursor.fetchone()[0]}")
        
        cursor.execute("SELECT COUNT(*) FROM fallas_especificas")
        print(f"  Fallas espec√≠ficas totales: {cursor.fetchone()[0]}")
        
        cursor.execute("SELECT COUNT(*) FROM infraestructura_red")
        print(f"  Componentes infraestructura: {cursor.fetchone()[0]}")
        
        cursor.execute("SELECT COUNT(*) FROM relaciones_componentes")
        print(f"  Relaciones componentes: {cursor.fetchone()[0]}")
        
        # Mostrar todos los casos
        print("\nüìã CASOS REALES DOCUMENTADOS:")
        print("-" * 70)
        cursor.execute("""
            SELECT nombre_caso, fecha_caso, tiempo_resolucion_horas 
            FROM casos_reales 
            ORDER BY fecha_caso
        """)
        for i, (nombre, fecha, tiempo) in enumerate(cursor.fetchall(), 1):
            print(f"  {i}. [{fecha}] {nombre} ({tiempo}h)")
        
        print("\n" + "="*70)
        
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        conn.rollback()
        raise
    finally:
        conn.close()

if __name__ == "__main__":
    agregar_caso_5()
