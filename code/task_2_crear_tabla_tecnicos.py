#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para crear la tabla de t√©cnicos en la base de datos
- Crear tabla 'tecnicos' con estructura completa
- Insertar 4 t√©cnicos iniciales
- Configurar constraints y validaciones
"""

import sqlite3
import sys
from datetime import datetime

def conectar_db():
    """Conecta a la base de datos"""
    try:
        conn = sqlite3.connect('sistema_camaras.db')
        return conn
    except sqlite3.Error as e:
        print(f"‚ùå Error al conectar a la base de datos: {e}")
        sys.exit(1)

def verificar_tabla_existente(cursor):
    """Verifica si la tabla t√©cnicos ya existe"""
    cursor.execute("""
        SELECT name FROM sqlite_master 
        WHERE type='table' AND name='tecnicos';
    """)
    return cursor.fetchone() is not None

def crear_tabla_tecnicos(cursor):
    """Crea la tabla t√©cnicos con estructura completa"""
    print("\n" + "="*80)
    print("üîß CREANDO TABLA T√âCNICOS")
    print("="*80)
    
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS tecnicos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL,
                apellido TEXT,
                nombre_completo TEXT NOT NULL,
                email TEXT UNIQUE,
                telefono TEXT,
                especialidad TEXT,
                rol TEXT DEFAULT 'T√©cnico',
                estado TEXT DEFAULT 'Activo' CHECK(estado IN ('Activo', 'Inactivo', 'Licencia')),
                fecha_ingreso DATE,
                fecha_baja DATE,
                notas TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("\n‚úÖ Tabla 'tecnicos' creada exitosamente")
        print("\nüìã Estructura de la tabla:")
        print("   ‚Ä¢ id: INTEGER PRIMARY KEY AUTOINCREMENT")
        print("   ‚Ä¢ nombre: TEXT NOT NULL")
        print("   ‚Ä¢ apellido: TEXT")
        print("   ‚Ä¢ nombre_completo: TEXT NOT NULL")
        print("   ‚Ä¢ email: TEXT UNIQUE")
        print("   ‚Ä¢ telefono: TEXT")
        print("   ‚Ä¢ especialidad: TEXT")
        print("   ‚Ä¢ rol: TEXT (default: 'T√©cnico')")
        print("   ‚Ä¢ estado: TEXT (Activo/Inactivo/Licencia)")
        print("   ‚Ä¢ fecha_ingreso: DATE")
        print("   ‚Ä¢ fecha_baja: DATE")
        print("   ‚Ä¢ notas: TEXT")
        print("   ‚Ä¢ created_at: TIMESTAMP")
        print("   ‚Ä¢ updated_at: TIMESTAMP")
        print("\n" + "="*80)
        return True
    except sqlite3.Error as e:
        print(f"\n‚ùå Error al crear tabla: {e}")
        return False

def insertar_tecnicos_iniciales(cursor):
    """Inserta los 4 t√©cnicos iniciales"""
    print("\n" + "="*80)
    print("üë• INSERTANDO T√âCNICOS INICIALES")
    print("="*80)
    
    tecnicos = [
        {
            'nombre': 'Oliver',
            'apellido': 'Carrasco',
            'nombre_completo': 'Oliver Carrasco',
            'rol': 'T√©cnico',
            'especialidad': 'Mantenimiento de C√°maras',
            'estado': 'Activo'
        },
        {
            'nombre': 'Marcos',
            'apellido': 'Altamirano',
            'nombre_completo': 'Marcos Altamirano',
            'rol': 'T√©cnico',
            'especialidad': 'Sistemas de Vigilancia',
            'estado': 'Activo'
        },
        {
            'nombre': 'Charles',
            'apellido': 'J√©lvez',
            'nombre_completo': 'Charles J√©lvez',
            'rol': 'SuperAdmin',
            'especialidad': 'Administraci√≥n de Sistemas',
            'estado': 'Activo',
            'notas': 'SuperAdmin del sistema - Desarrollador'
        },
        {
            'nombre': 'Marco',
            'apellido': 'Contreras',
            'nombre_completo': 'Marco Contreras',
            'rol': 'Supervisor',
            'especialidad': 'Supervisi√≥n de Seguridad',
            'estado': 'Activo',
            'notas': 'Supervisor de Seguridad'
        }
    ]
    
    insertados = 0
    try:
        for tec in tecnicos:
            cursor.execute("""
                INSERT INTO tecnicos 
                (nombre, apellido, nombre_completo, rol, especialidad, estado, notas)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                tec['nombre'],
                tec['apellido'],
                tec['nombre_completo'],
                tec['rol'],
                tec['especialidad'],
                tec['estado'],
                tec.get('notas', '')
            ))
            insertados += 1
            print(f"   ‚úì {tec['nombre_completo']} - {tec['rol']}")
        
        print(f"\n‚úÖ {insertados} t√©cnicos insertados exitosamente")
        print("="*80)
        return True
    except sqlite3.IntegrityError as e:
        print(f"\n‚ö†Ô∏è  Advertencia: Algunos t√©cnicos ya existen: {e}")
        return True
    except sqlite3.Error as e:
        print(f"\n‚ùå Error al insertar t√©cnicos: {e}")
        return False

def verificar_datos(cursor):
    """Verifica los datos insertados"""
    print("\n" + "="*80)
    print("‚úì VERIFICACI√ìN DE DATOS")
    print("="*80)
    
    cursor.execute("""
        SELECT id, nombre_completo, rol, especialidad, estado 
        FROM tecnicos
        ORDER BY 
            CASE rol 
                WHEN 'SuperAdmin' THEN 1
                WHEN 'Supervisor' THEN 2
                WHEN 'T√©cnico' THEN 3
                ELSE 4
            END,
            nombre_completo
    """)
    
    tecnicos = cursor.fetchall()
    
    if tecnicos:
        print(f"\nüìä Total de t√©cnicos en base de datos: {len(tecnicos)}")
        print("\n" + "-" * 80)
        print(f"{'ID':<5} {'Nombre':<25} {'Rol':<15} {'Especialidad':<25} {'Estado'}")
        print("-" * 80)
        
        for tec in tecnicos:
            id_tec, nombre, rol, esp, estado = tec
            print(f"{id_tec:<5} {nombre:<25} {rol:<15} {esp:<25} {estado}")
        
        print("-" * 80)
        print("\n‚úÖ VERIFICACI√ìN EXITOSA")
        print("="*80)
    else:
        print("\n‚ö†Ô∏è  No se encontraron t√©cnicos en la base de datos")

def crear_indices(cursor):
    """Crea √≠ndices para mejorar el rendimiento"""
    print("\n" + "="*80)
    print("üìë CREANDO √çNDICES")
    print("="*80)
    
    try:
        # √çndice para b√∫squeda por nombre
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_tecnicos_nombre 
            ON tecnicos(nombre_completo)
        """)
        print("   ‚úì √çndice: idx_tecnicos_nombre")
        
        # √çndice para filtrado por rol
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_tecnicos_rol 
            ON tecnicos(rol)
        """)
        print("   ‚úì √çndice: idx_tecnicos_rol")
        
        # √çndice para filtrado por estado
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_tecnicos_estado 
            ON tecnicos(estado)
        """)
        print("   ‚úì √çndice: idx_tecnicos_estado")
        
        print("\n‚úÖ √çndices creados exitosamente")
        print("="*80)
        return True
    except sqlite3.Error as e:
        print(f"\n‚ùå Error al crear √≠ndices: {e}")
        return False

def main():
    print("\n" + "="*80)
    print("üöÄ SCRIPT: Creaci√≥n de Tabla T√©cnicos")
    print("="*80)
    print(f"Fecha/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    conn = conectar_db()
    cursor = conn.cursor()
    
    try:
        # 1. Verificar si la tabla ya existe
        tabla_existe = verificar_tabla_existente(cursor)
        if tabla_existe:
            print("\n‚ö†Ô∏è  La tabla 'tecnicos' ya existe. Continuando con la verificaci√≥n...")
        
        # 2. Crear tabla
        if not crear_tabla_tecnicos(cursor):
            conn.rollback()
            print("\n‚ùå Error al crear la tabla. Operaci√≥n cancelada.")
            return
        
        # 3. Crear √≠ndices
        if not crear_indices(cursor):
            conn.rollback()
            print("\n‚ö†Ô∏è  Advertencia: Error al crear √≠ndices, pero la tabla fue creada")
        
        # 4. Insertar t√©cnicos iniciales
        if not insertar_tecnicos_iniciales(cursor):
            conn.rollback()
            print("\n‚ùå Error al insertar t√©cnicos. Operaci√≥n cancelada.")
            return
        
        # 5. Commit
        conn.commit()
        print("\nüíæ Cambios guardados en la base de datos")
        
        # 6. Verificar datos
        verificar_datos(cursor)
        
        print("\n" + "="*80)
        print("‚úÖ PROCESO COMPLETADO EXITOSAMENTE")
        print("="*80)
        print("\nüìù Pr√≥ximos pasos:")
        print("   1. Actualizar casos reales para vincular con t√©cnicos")
        print("   2. Crear vista/relaci√≥n entre casos_reales y tecnicos")
        print("   3. Implementar CRUD en la aplicaci√≥n web")
        print("="*80)
        
    except Exception as e:
        conn.rollback()
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        conn.close()
        print("\nüîå Conexi√≥n a la base de datos cerrada")
        print("="*80 + "\n")

if __name__ == "__main__":
    main()
