{
  "todos": {
    "Coordinator": {
      "1": {
        "id": "1",
        "content": "Analizar código existente y estructura del proyecto",
        "details": "Revisar el código Flask existente en el repositorio GitHub, identificar qué está implementado y qué falta. Analizar estructura de archivos, rutas existentes, y plantillas Jinja2.",
        "status": "pending",
        "priority": "high"
      },
      "2": {
        "id": "2",
        "content": "Diseñar esquema completo de base de datos PostgreSQL",
        "details": "Basándose en sistema_camaras.db y requisitos documentados, crear esquema completo con:\n- Tablas: usuarios, ubicaciones, camaras, gabinetes, switches, ups, nvr_dvr, fuentes_poder, fallas, mantenimientos, tipos_fallas, estados\n- Relaciones y claves foráneas\n- Índices para optimización\n- Triggers para validación anti-duplicados",
        "status": "pending",
        "priority": "high"
      },
      "3": {
        "id": "3",
        "content": "Desarrollar sistema de autenticación y roles",
        "details": "Implementar:\n- Login/Logout con Flask-Login\n- Gestión de usuarios con roles (Admin, Técnico, Visualizador)\n- Protección de rutas según permisos\n- Hash de contraseñas con werkzeug.security",
        "status": "pending",
        "priority": "high"
      },
      "4": {
        "id": "4",
        "content": "Crear scripts de migración desde Excel a PostgreSQL",
        "details": "Desarrollar script Python que:\n- Lea las 12 planillas Excel enriquecidas\n- Valide datos antes de insertar\n- Migre a PostgreSQL con manejo de errores\n- Implemente validación anti-duplicados de fallas\n- Genere log de migración",
        "status": "pending",
        "priority": "high"
      },
      "5": {
        "id": "5",
        "content": "Implementar CRUD completo para 6 tipos de equipos",
        "details": "Desarrollar rutas Flask y plantillas Jinja2 para:\n- Cámaras (474 unidades)\n- Gabinetes\n- Switches\n- UPS\n- NVR/DVR\n- Fuentes de poder\nCon formularios de alta/baja, edición, y visualización con historial",
        "status": "pending",
        "priority": "medium"
      },
      "6": {
        "id": "6",
        "content": "Desarrollar sistema completo de gestión de fallas",
        "details": "Implementar:\n- Formulario registro manual de fallas\n- Workflow 6 estados (Pendiente → Asignada → En Proceso → Reparada → Cerrada / Cancelada)\n- Asignación de técnicos\n- Registro de soluciones y costos\n- Validación anti-duplicados (no permitir falla nueva si existe pendiente/asignada/en proceso)\n- Historial completo de cambios de estado",
        "status": "pending",
        "priority": "high"
      },
      "7": {
        "id": "7",
        "content": "Crear dashboard interactivo con estadísticas",
        "details": "Desarrollar página principal con:\n- Estadísticas en tiempo real (total cámaras, fallas activas, mantenimientos del mes)\n- Gráficos con Chart.js\n- Filtros por campus\n- Indicadores de estado del sistema\n- Diseño responsive",
        "status": "pending",
        "priority": "medium"
      },
      "8": {
        "id": "8",
        "content": "Implementar mapas de red con Mermaid.js",
        "details": "Crear visualizaciones de topología:\n- Mapa completo de infraestructura\n- Mapas en cascada por ubicación\n- Visualización jerárquica: Core Switch → Switch → Gabinete → UPS → Cámara/NVR\n- Filtros por campus",
        "status": "pending",
        "priority": "medium"
      },
      "9": {
        "id": "9",
        "content": "Integrar geolocalización con mapas interactivos",
        "details": "Implementar con Leaflet.js:\n- Mapa interactivo con ubicación de todos los equipos\n- Markers con coordenadas GPS\n- Popup con información del equipo\n- Filtros por tipo de equipo y campus",
        "status": "pending",
        "priority": "medium"
      },
      "10": {
        "id": "10",
        "content": "Desarrollar sistema de reportes avanzados",
        "details": "Crear módulo de informes con:\n- Inventarios por campus (Excel descargable)\n- Análisis de fallas por tipo y frecuencia\n- Reportes de mantenimiento preventivo\n- Estadísticas de tiempo de resolución\n- Exportación a Excel (openpyxl) y PNG (matplotlib)\n- CSS optimizado para impresión",
        "status": "pending",
        "priority": "medium"
      },
      "11": {
        "id": "11",
        "content": "Configurar para deployment en Railway",
        "details": "Preparar:\n- Procfile con gunicorn\n- railway.json\n- requirements.txt completo\n- Variables de entorno (DATABASE_URL, SECRET_KEY)\n- Migraciones automáticas al deploy\n- Configuración PostgreSQL",
        "status": "pending",
        "priority": "high"
      },
      "12": {
        "id": "12",
        "content": "Testing y documentación final",
        "details": "- Probar todas las funcionalidades localmente\n- Verificar validación anti-duplicados\n- Documentar proceso de deployment\n- Crear guía de usuario básica\n- Preparar README.md actualizado",
        "status": "pending",
        "priority": "low"
      }
    }
  }
}